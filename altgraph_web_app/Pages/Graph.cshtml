@page
@model GraphModel
@{
  ViewData["Title"] = "Home page";
}

<div>
  <div th:fragment="page_title">
    <h1 class="text-center text-danger"> AltGraph </h1>
    <h3 class="text-center text-muted"> Graph Solutions with the Azure CosmosDB SQL API</h3>
  </div>
  <div th:fragment="search_form" class="d-flex justify-content-center">
    <form class="d-flex align-items-center" id="searchForm" name="searchForm" th:object="${formObject}" method="POST">
      <span>&nbsp;&nbsp;&nbsp;</span>
      <a href="https://docs.microsoft.com/en-us/azure/?product=featured" target="_blank">
        <img th:src="~/images/cosmos-logo-110.png" alt="CosmosDB Logo">
      </a>

      <input type="text" th:field="${formObject.subjectName}" id="subjectName" name="subjectName"
        class="form-control me-2" placeholder="Library Name" aria-label="Search">
      <input type="checkbox" th:field="${formObject.authorCheckbox}" id="authorCheckbox" name="authorCheckbox"
        class="form-control form-check-input me-2" aria-label="Author Checkbox">
      <label class="form-check-label me-2" for="authorCheckbox">Author</label>
      <input type="text" th:field="${formObject.graphDepth}" id="graphDepth" name="graphDepth" class="form-control me-2"
        placeholder="Graph Depth" aria-label="Graph Depth">
      <input type="text" th:field="${formObject.cacheOpts}" id="cacheOpts" name="cacheOpts" class="form-control me-2"
        placeholder="Cache Opts L T" aria-label="Cache Opts">
      <button class="btn btn-outline-primary" type="submit">Search</button>
      <span>&nbsp;&nbsp;</span>
      <input type="text" th:field="${formObject.elapsedMs}" id="elapsedMs" name="elapsedMs" class="form-control me-3"
        placeholder="Elapsed ms" aria-label="readonly Elapsed ms" readonly>
      <input type="hidden" th:field="${formObject.sessionId}" id="sessionId" name="sessionId">

      <a href="https://docs.microsoft.com/en-us/azure/?product=featured" target="_blank">
        <img th:src="~/images/cosmos-logo-110.png" alt="CosmosDB Logo">
      </a>
      <span>&nbsp;&nbsp;</span>
    </form>
  </div>
  <h5 class="d-flex justify-content-center" id="libraryInfo" name="libraryInfo"></h5>

  <div id="viz">
    <svg style="width:95%;height:1024px;">
      <g></g>
    </svg>
  </div>
</div>

<script src="~/lib/bootstrap/dist/js/bootstrap.bundle.min.js"></script>
<script>
  $(document).ready(function () {
    console.log("graph.html onready");

    function submitForm() {
      document.getElementById("searchForm").submit();
    }

    function nodeClicked(e, d) {
      console.log("nodeClicked: " + d.name);
      var libName = d.name;
      $("#libraryInfo").text(libName + " ...");
      var url = "/get_library/" + libName;
      $.get(url, function (data) {
        console.log(data);
        var author = data.author.trim();
        var desc = data.desc.trim();
        var info = "Library: " + libName + "  ";
        if (author.length > 0) {
          info = info + "author: " + author + "  ";
        }
        if (desc.length > 0) {
          info = info + "  Description: " + desc;
        }
        $("#libraryInfo").text(info);
      });
    }
    function nodeDblClicked(e, d) {
      console.log("nodeDblClicked: " + d.name);
      $("#libraryInfo").text("");
      $("#subjectName").val(d.name);
      //$("#searchDepth").val('1');
      d3.select("#viz").style("opacity", 0);  // hide the graph momentarily
      $("#searchForm").submit();
    }
    function nodeMouseOver(e, d) {
      //console.log("nodeMouseOver: " + d.name);
    }
    function nodeMouseOut(e, d) {
      //console.log("nodeMouseOut: " + d.name);
    }

    function initZoom() {
      d3.select('svg').call(zoom);
    }

    function handleZoom(e) {
      console.log('handle zoom');
      d3.select('svg g').attr('transform', e.transform);
    }

    let zoom = d3.zoom().on('zoom', handleZoom);

    var typeScale = d3.scaleOrdinal()
      .domain(["library", "author", "maintainer"])
      .range(["#75739F", "#41A368", "#FE9922"]);

    // See https://datawanderings.com/2018/08/15/d3-js-v5-promise-syntax-examples/
    var nodes = Array();
    var edges = Array();
    var httpRequestPromises = [
      d3.csv('nodes_csv'),
      d3.csv('edges_csv')
    ];
    mergedPromise = Promise.all(httpRequestPromises);
    mergedPromise.then(function (data) {
      console.log("csv data should now be loaded");
      data[0].map(function (n) {
        console.log(n);
        nodes.push(n);
      });
      data[1].map(function (e) {
        console.log(e);
        edges.push(e);
      });
      console.log("csv data should now be loaded");
      console.log("nodes: " + nodes.length);
      console.log("edges: " + edges.length);
      generateGraphViz(nodes, edges);
    });

    function generateGraphViz(nodes, edges) {
      console.log("generateGraphViz");

      var marker = d3.select("svg").append('defs')
        .append('marker')
        .attr("id", "Triangle")
        .attr("refX", 12)
        .attr("refY", 6)
        .attr("markerUnits", 'userSpaceOnUse')
        .attr("markerWidth", 12)
        .attr("markerHeight", 18)
        .attr("orient", 'auto')
        .append('path')
        .attr("d", 'M 0 0 12 6 0 12 3 6');

      var nodeHash = {};
      nodes.forEach(node => {
        node.weight = parseInt(node.weight);
        nodeHash[node.name] = node;
      });

      nodes.forEach(node => {
        console.log("node: " + node.name);
      });

      edges.forEach(edge => {
        edge.weight = parseInt(edge.weight);
        edge.source = nodeHash[edge.source];
        edge.target = nodeHash[edge.target];
      });

      var linkForce = d3.forceLink(edges);

      var simulation = d3.forceSimulation()
        .force("charge", d3.forceManyBody().strength(-2000))
        .force("center", d3.forceCenter().x(800).y(500))
        .force("link", linkForce)
        .nodes(nodes)
        .on("tick", forceTick);

      simulation.force("link").links(edges);

      d3.select("svg g").selectAll("line.link")
        .data(edges, d => `${d.source.id}-${d.target.id}`)
        .enter()
        .append("line")
        .attr("class", "link")
        .style("opacity", .5)
        .style("stroke-width", d => d.weight);

      d3.selectAll("line").attr("marker-end", "url(#Triangle)");

      var nodeEnter = d3.select("svg g").selectAll("g.node")
        .data(nodes, d => d.name)
        .enter()
        .append("g")
        .attr("class", "node");
      nodeEnter.append("circle")
        .attr("r", 5)
        .style("fill", d => typeScale(d.type));
      nodeEnter.append("text")
        .style("text-anchor", "middle")
        .attr("y", 15)
        .text(d => d.name);

      // Register mouse event handler functions for each Node

      d3.selectAll("g.node").on("click", function (e, d) {
        nodeClicked(e, d);
      });
      d3.selectAll("g.node").on("dblclick", function (e, d) {
        nodeDblClicked(e, d);
      });
      d3.selectAll("g.node").on("mouseover", function (e, d) {
        nodeMouseOver(e, d);
      });
      d3.selectAll("g.node").on("mouseout", function (e, d) {
        nodeMouseOut(e, d);
      });

      function forceTick() {
        d3.selectAll("line.link")
          .attr("x1", d => d.source.x)
          .attr("x2", d => d.target.x)
          .attr("y1", d => d.source.y)
          .attr("y2", d => d.target.y);
        d3.selectAll("g.node")
          .attr("transform", d => `translate(${d.x},${d.y})`);
      }

      initZoom();
    }
  });
</script>